#pragma once

#include <cmath>
#include <cstring>
#include <cstdint>
#include <iostream>
#include <iomanip>
#include <limits>
#include <bit>

// Generated by convert_rvv_to_scalar.py
// Scalar versions of RISC-V vector sin implementation for precision analysis

// Parsed constants from #define statements

struct SinDebugValues {
    double input_v; // Original input value
    double final_result; // Final computed result
    double final_result_before_sign; // Result before sign application
};

SinDebugValues sin_scalar_f32_debug(float v) {
    SinDebugValues dbg = {};
    dbg.input_v = v;

    // Variable declarations


    // SSA operations with debug instrumentation

    // Handle final result
    // No tmp variable found for sin kernel

    return dbg;
}

SinDebugValues sin_scalar_f64_debug(double v) {
    SinDebugValues dbg = {};
    dbg.input_v = v;

    // Variable declarations


    // SSA operations with debug instrumentation

    // Handle final result
    // No tmp variable found for sin kernel

    return dbg;
}


// Comprehensive debug printing function for all sin SSA variables
void print_all_sin_debug_values(const SinDebugValues& f32_dbg, const SinDebugValues& f64_dbg, const char* test_name = "test") {
    auto print_row = [](const char *name, double f32v, double f64v) {
        float a = static_cast<float>(f32v);
        float b = static_cast<float>(f64v);
        // Simple ULP difference calculation
        uint32_t ua, ub;
        std::memcpy(&ua, &a, sizeof(ua));
        std::memcpy(&ub, &b, sizeof(ub));
        uint32_t ulp = (ua > ub) ? (ua - ub) : (ub - ua);
        if ((ua ^ ub) & 0x80000000u) ulp = std::numeric_limits<uint32_t>::max(); // Different signs

        std::cout << std::left << std::setw(26) << name << "| "
                  << std::setw(20) << std::scientific << std::setprecision(8) << a << "| "
                  << std::setw(20) << b << "| ULP " << ulp << "\n";
    };

    std::cout << "\n=== " << test_name << " - ALL SIN DEBUG VALUES ===\n";
    std::cout << std::left << std::setw(26) << "Variable Name" << "| "
              << std::setw(20) << "f32 Value" << "| "
              << std::setw(20) << "f64 Value" << "| ULP Diff\n";
    std::cout << std::string(80, '-') << "\n";

    // Standard fields
    print_row("input_v", f32_dbg.input_v, f64_dbg.input_v);
    print_row("final_result", f32_dbg.final_result, f64_dbg.final_result);
    print_row("final_result_before_sign", f32_dbg.final_result_before_sign, f64_dbg.final_result_before_sign);
    std::cout << std::string(80, '=') << "\n\n";
}

