//with peak register less than 4, 
// but precision error is too high. ulp error can reach ~10
// New LMUL=8 sin using cos polynomial to reduce live registers.
#define SIN_FLOAT32_LMUL_8(lmul, mlen)                                        \
    inline vfloat32m##lmul##_t sin_float32(const vfloat32m##lmul##_t &v,      \
                                           const size_t vl) {                 \
        /* r = |x| and capture sign from input */                              \
        auto r = __riscv_vfabs_v_f32m##lmul(v, vl);                            \
        auto tmp1 = __riscv_vreinterpret_v_f32m##lmul##_i32m##lmul(v);                 \
        auto tmp2 = __riscv_vreinterpret_v_f32m##lmul##_i32m##lmul(r); \
        auto sign = __riscv_vxor_vv_i32m##lmul(tmp1, tmp2      , vl);            \
                                                                               \
        /* k = round(|x|/pi) */                                               \
        auto n = __riscv_vfmul_vf_f32m##lmul(r, 0x1.45f306p-2f, vl);           \
        auto ki = __riscv_vfcvt_x_f_v_i32m##lmul(n, vl);                       \
        n = __riscv_vfcvt_f_x_v_f32m##lmul(ki, vl);                            \
        /* odd = ((k & 1) << 31), merge into sign early */                     \
        auto odd = __riscv_vand_vx_i32m##lmul(ki, 1, vl);                      \
        odd = __riscv_vsll_vx_i32m##lmul(odd, 31, vl);                         \
        sign = __riscv_vxor_vv_i32m##lmul(sign, odd, vl);                      \
                                                                               \
        /* r = |x| - k*pi (3-term high-precision split) */                     \
        r = __riscv_vfnmsac_vf_f32m##lmul(r,  0x1.921fb6p+1f, n, vl);          \
        r = __riscv_vfnmsac_vf_f32m##lmul(r, -0x1.777a5cp-24f, n, vl);         \
        r = __riscv_vfnmsac_vf_f32m##lmul(r, -0x1.ee59dap-49f, n, vl);         \
                                                                               \
        /* r' = pi/2 - r using 3-term split to reduce cancellation error */    \
        /* pi/2 split: +0x1.921fb6p+0f, -0x1.777a5cp-25f, -0x1.ee59dap-50f */  \
        r = __riscv_vfrsub_vf_f32m##lmul(r,  0x1.921fb6p+0f, vl);              \
        r = __riscv_vfadd_vf_f32m##lmul(r, -0x1.777a5cp-25f, vl);              \
        r = __riscv_vfadd_vf_f32m##lmul(r, -0x1.ee59dap-50f, vl);              \
                                                                               \
        /* r2 = r'^2 */                                                        \
        auto r2 = __riscv_vfmul_vv_f32m##lmul(r, r, vl);                       \
                                                                               \
        /* cos polynomial (Horner, no vfmadd): keep {sign, r2, y} */           \
vfloat32m##lmul##_t y = __riscv_vfmv_v_f_f32m##lmul( 2.08767569e-09f, vl); /* c12 = 1/12! */\
y = __riscv_vfmul_vv_f32m##lmul(y, r2, vl);\
y = __riscv_vfadd_vf_f32m##lmul(y, -2.755731884e-07f, vl);                  /* + c10 = -1/10! */\
y = __riscv_vfmul_vv_f32m##lmul(y, r2, vl);\
y = __riscv_vfadd_vf_f32m##lmul(y,  2.4801587642e-05f, vl);                  /* + c8  = 1/8! */ \
        y = __riscv_vfmul_vv_f32m##lmul(y, r2, vl);                            \
        y = __riscv_vfadd_vf_f32m##lmul(y, -1.3888889225e-03f, vl);            \
        y = __riscv_vfmul_vv_f32m##lmul(y, r2, vl);                            \
        y = __riscv_vfadd_vf_f32m##lmul(y,  4.1666667908e-02f, vl);            \
        y = __riscv_vfmul_vv_f32m##lmul(y, r2, vl);                            \
        y = __riscv_vfadd_vf_f32m##lmul(y, -5.0000000000e-01f, vl);            \
        y = __riscv_vfmul_vv_f32m##lmul(y, r2, vl);                            \
        y = __riscv_vfadd_vf_f32m##lmul(y,  1.0000000000e+00f, vl);            \
                                                                               \
        auto tmp = __riscv_vreinterpret_v_f32m##lmul##_i32m##lmul(y);          \
        tmp = __riscv_vxor_vv_i32m##lmul(tmp, sign, vl);                       \
        return __riscv_vreinterpret_v_i32m##lmul##_f32m##lmul(tmp);            \
    }
#endif

