{
  "intrinsic_mappings": {
    "__riscv_vfabs_v_f*": {
      "pattern": "{result} = std::fabs({operand1})",
      "operands": ["vector"],
      "description": "Absolute value"
    },
    "__riscv_vfmul_vf_f*": {
      "pattern": "{result} = {operand1} * {operand2}",
      "operands": ["vector", "scalar_constant"],
      "description": "Multiply vector by scalar"
    },
    "__riscv_vfnmsac_vf_f*": {
      "pattern": "{result} = {operand1} - {operand2} * {operand3}",
      "operands": ["vector", "scalar_constant", "vector"],
      "description": "Fused negative multiply-subtract"
    },
    "__riscv_vfrsub_vf_f*": {
      "pattern": "{result} = {operand2} - {operand1}",
      "operands": ["vector", "scalar_constant"],
      "description": "Reverse subtract (constant - vector)"
    },
    "__riscv_vfadd_v*_f*": {
      "pattern": "{result} = {operand1} + {operand2}",
      "operands": ["vector", "scalar_constant"],
      "description": "Add vector and scalar"
    },
    "__riscv_vfmul_vv_f*": {
      "pattern": "{result} = {operand1} * {operand2}",
      "operands": ["vector", "vector"],
      "description": "Multiply two vectors"
    },
    "__riscv_vfmin_vf_f*": {
      "pattern": "{result} = std::fmin({operand1}, {operand2})",
      "operands": ["vector", "scalar_constant"],
      "description": "Min of vector and scalar"
    },
    "__riscv_vfmax_vf_f*": {
      "pattern": "{result} = std::fmax({operand1}, {operand2})",
      "operands": ["vector", "scalar_constant"],
      "description": "Max of vector and scalar"
    },
    "__riscv_vfmadd_vv_f*": {
      "pattern": "{result} = {operand1} * {operand2} + {operand3}",
      "operands": ["vector", "vector", "vector"],
      "description": "Fused multiply-add (vvf)"
    },
    "__riscv_vmfgt_vv_f*_b*": {
      "pattern": "{result} = ({operand1} > {operand2})",
      "operands": ["vector", "vector"],
      "description": "Mask greater-than (vv)"
    },
    "__riscv_vfsub_vf_f*_m": {
      "pattern": "{result} = ({operand1}) ? (({operand2}) - ({operand3})) : ({operand2})",
      "operands": ["mask", "vector", "scalar_constant"],
      "description": "Masked subtract vector - scalar"
    },
    "__riscv_vadd_vv_i*": {
      "pattern": "{result} = {operand1} + {operand2}",
      "operands": ["int32", "int32"],
      "description": "Add two int vectors (scalarized)"
    },
    "__riscv_vfcvt_x_f_v_i*": {
      "pattern": "{result} = static_cast<int32_t>(roundf({operand1}))",
      "operands": ["vector"],
      "result_type": "int32_t",
      "description": "Convert float to int with rounding"
    },
    "__riscv_vfcvt_f_x_v_f*": {
      "pattern": "{result} = static_cast<float>({operand1})",
      "operands": ["vector"],
      "result_type": "float",
      "description": "Convert int to float"
    },
    "__riscv_vfmv_v_f_f*": {
      "pattern": "{result} = {operand1}",
      "operands": ["scalar_constant"],
      "description": "Set vector to scalar value"
    }
  },
  "bit_operations": {
    "__riscv_vreinterpret_v_f32m*_i32m*": {
      "pattern": "std::bit_cast<uint32_t>({operand1})",
      "description": "Reinterpret float as int32",
      "result_type": "uint32_t"
    },
    "__riscv_vreinterpret_v_i32m*_f32m*": {
      "pattern": "std::bit_cast<float>({operand1})",
      "description": "Reinterpret int32 as float",
      "result_type": "float"
    },
    "__riscv_vreinterpret_v_fm_im*": {
      "pattern": "std::bit_cast<uint32_t>({operand1})",
      "description": "Reinterpret float (any LMUL) as int (sanitized)",
      "result_type": "uint32_t"
    },
    "__riscv_vreinterpret_v_im_fm*": {
      "pattern": "std::bit_cast<float>({operand1})",
      "description": "Reinterpret int (sanitized) as float",
      "result_type": "float"
    },
    "__riscv_vxor_vv_i32m*": {
      "pattern": "{result} = {operand1} ^ {operand2}",
      "operands": ["int32", "int32"],
      "description": "Bitwise XOR"
    },
    "__riscv_vand_vx_i32m*": {
      "pattern": "{result} = {operand1} & {operand2}",
      "operands": ["int32", "scalar_constant"],
      "description": "Bitwise AND with scalar"
    },
    "__riscv_vsll_vx_i32m*": {
      "pattern": "{result} = {operand1} << {operand2}",
      "operands": ["int32", "scalar_constant"],
      "description": "Left shift by scalar"
    },
    "__riscv_vsll_vx_im*": {
      "pattern": "{result} = {operand1} << {operand2}",
      "operands": ["int32", "scalar_constant"],
      "description": "Left shift by scalar (sanitized name)"
    }
  },
  "operand_detection": {
    "scalar_constant_patterns": [
      "^0x[0-9a-fA-F]+\\.[0-9a-fA-F]+p[+-][0-9]+f?$",
      "^-0x[0-9a-fA-F]+\\.[0-9a-fA-F]+p[+-][0-9]+f?$",
      "^-?[0-9]*\\.[0-9]+[eE][+-][0-9]+f?$",
      "^-?[0-9]+\\.[0-9]*f?$",
      "^-?[0-9]+$"
    ],
    "vector_variable_patterns": [
      "^[a-zA-Z_][a-zA-Z0-9_]*$"
    ]
  },
  "constants": {
    "float_version": {
      "0x1.45f306p-2f": "0x1.45f306p-2f",
      "0x1.921fb6p+1f": "0x1.921fb6p+1f",
      "-0x1.777a5cp-24f": "-0x1.777a5cp-24f",
      "-0x1.ee59dap-49f": "-0x1.ee59dap-49f",
      "0x1.921fb6p+0f": "0x1.921fb6p+0f",
      "-0x1.777a5cp-25f": "-0x1.777a5cp-25f",
      "-0x1.ee59dap-50f": "-0x1.ee59dap-50f"
    },
    "double_version": {
      "0x1.45f306p-2f": "1.0 / M_PI",
      "0x1.921fb6p+1f": "3.1415926218032837",
      "-0x1.777a5cp-24f": "-3.1786509424591713e-08",
      "-0x1.ee59dap-49f": "-1.2246467991473532e-16",
      "0x1.921fb6p+0f": "1.5707963267948966",
      "-0x1.777a5cp-25f": "-6.123233995736766e-17",
      "-0x1.ee59dap-50f": "-3.061616997868383e-17"
    }
  },
  "polynomial_coeffs": {
    "float_version": [
      {"value": "2.08767569e-09f", "comment": "c12 = 1/12!"},
      {"value": "-2.755731884e-07f", "comment": "c10 = -1/10!"},
      {"value": "2.4801587642e-05f", "comment": "c8 = 1/8!"},
      {"value": "-1.3888889225e-03f", "comment": "c6 = -1/6!"},
      {"value": "4.1666667908e-02f", "comment": "c4 = 1/4!"},
      {"value": "-5.0000000000e-01f", "comment": "c2 = -1/2!"},
      {"value": "1.0000000000e+00f", "comment": "c0 = 1"}
    ],
    "double_version": [
      {"value": "2.0876756987868099e-09", "comment": "1/12!"},
      {"value": "-2.7557319223985891e-07", "comment": "-1/10!"},
      {"value": "2.4801587301587289e-05", "comment": "1/8!"},
      {"value": "-0.0013888888888888868", "comment": "-1/6!"},
      {"value": "0.041666666666666664", "comment": "1/4!"},
      {"value": "-0.5", "comment": "-1/2!"},
      {"value": "1.0", "comment": "1"}
    ]
  },
  "debug_struct": {
    "name": "SinDebugValues",
    "fields": [
      {"name": "input_v", "type": "double", "description": "Original input value"},
      {"name": "r_abs", "type": "double", "description": "Absolute value of input"},
      {"name": "n_unrounded", "type": "double", "description": "Unrounded k value (|x|/pi)"},
      {"name": "ki", "type": "int32_t", "description": "Rounded integer k"},
      {"name": "n_rounded", "type": "double", "description": "k converted back to float/double"},
      {"name": "sign_bits", "type": "uint32_t", "description": "Sign extraction bits"},
      {"name": "odd_bits", "type": "uint32_t", "description": "Odd quadrant adjustment bits"},
      {"name": "final_sign_bits", "type": "uint32_t", "description": "Final sign bits after odd adjustment"},
      {"name": "r_reduced", "type": "double", "description": "Range reduced value (|x| - k*pi)"},
      {"name": "r_prime", "type": "double", "description": "Transformed argument (pi/2 - r)"},
      {"name": "r2", "type": "double", "description": "r_prime squared"},
      {"name": "y_c12", "type": "double", "description": "After c12 coefficient"},
      {"name": "y_c10", "type": "double", "description": "After c10 coefficient"},
      {"name": "y_c8", "type": "double", "description": "After c8 coefficient"},
      {"name": "y_c6", "type": "double", "description": "After c6 coefficient"},
      {"name": "y_c4", "type": "double", "description": "After c4 coefficient"},
      {"name": "y_c2", "type": "double", "description": "After c2 coefficient"},
      {"name": "poly_result", "type": "double", "description": "Final polynomial result (c0)"},
      {"name": "final_result_before_sign", "type": "double", "description": "Result before sign application"},
      {"name": "final_result", "type": "double", "description": "Final result with sign applied"}
    ]
  }
}
