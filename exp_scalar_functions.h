#pragma once

#include <cmath>
#include <cstring>
#include <cstdint>
#include <iostream>
#include <iomanip>
#include <limits>
#include <bit>

// Generated by convert_rvv_to_scalar.py
// Scalar versions of RISC-V vector exp implementation for precision analysis

// Parsed constants from #define statements
const int32_t MANTISSA_BITS = 23; // Mantissa bits for float32
const int64_t MANTISSA_BITS_D = 52; // Mantissa bits for float64
const double c_cephes_LOG2EF = 1.44269504088896341;
const float c_cephes_LOG2EF_f = 1.44269504088896341f;
const double c_cephes_exp_C1 = 0.693359375;
const float c_cephes_exp_C1_f = 0.693359375f;
const double c_cephes_exp_C2 = -2.12194440e-4;
const float c_cephes_exp_C2_f = -2.12194440e-4f;
const double c_cephes_exp_p0 = 1.9875691500E-4;
const float c_cephes_exp_p0_f = 1.9875691500E-4f;
const double c_cephes_exp_p1 = 1.3981999507E-3;
const float c_cephes_exp_p1_f = 1.3981999507E-3f;
const double c_cephes_exp_p2 = 8.3334519073E-3;
const float c_cephes_exp_p2_f = 8.3334519073E-3f;
const double c_cephes_exp_p3 = 4.1665795894E-2;
const float c_cephes_exp_p3_f = 4.1665795894E-2f;
const double c_cephes_exp_p4 = 1.6666665459E-1;
const float c_cephes_exp_p4_f = 1.6666665459E-1f;
const double c_cephes_exp_p5 = 5.0000001201E-1;
const float c_cephes_exp_p5_f = 5.0000001201E-1f;
const float c_exp_hi = 88.0f;
const double c_exp_hi_d = 88.0;
const float c_exp_lo = -88.0f;
const double c_exp_lo_d = -88.0;

struct ExpDebugValues {
    double input_v; // Original input value
    double final_result; // Final computed result
    double a1_f1; // SSA variable a1_f1
    double a1_f2; // SSA variable a1_f2
    int64_t a2_f1; // SSA variable a2_f1
    int64_t a_f1; // SSA variable a_f1
    double b1_f1; // SSA variable b1_f1
    double b1_f2; // SSA variable b1_f2
    double b1_f3; // SSA variable b1_f3
    double b1_f4; // SSA variable b1_f4
    double b1_f5; // SSA variable b1_f5
    double b2_f1; // SSA variable b2_f1
    double b2_f2; // SSA variable b2_f2
    double b3_f1; // SSA variable b3_f1
    double b3_f2; // SSA variable b3_f2
    double b_f1; // SSA variable b_f1
    double c1_f1; // SSA variable c1_f1
    double c3_f1; // SSA variable c3_f1
    double c5_f1; // SSA variable c5_f1
    bool mask_f1; // SSA variable mask_f1
    int64_t ret_f1; // SSA variable ret_f1
    double tmp_f1; // SSA variable tmp_f1
    double tmp_f2; // SSA variable tmp_f2
    int64_t tmpi_f1; // SSA variable tmpi_f1
    double x2_f1; // SSA variable x2_f1
    double x_f1; // SSA variable x_f1
    double x_f2; // SSA variable x_f2
    double x_f3; // SSA variable x_f3
    double x_f4; // SSA variable x_f4
    double x_f5; // SSA variable x_f5
};

ExpDebugValues exp_scalar_f32_debug(float v) {
    ExpDebugValues dbg = {};
    dbg.input_v = v;

    // Variable declarations
    int32_t a;
    float a1;
    int32_t a2;
    float b;
    float b1;
    float b2;
    float b3;
    float c1;
    float c3;
    float c5;
    bool mask;
    int32_t ret;
    float tmp;
    int32_t tmpi;
    float x;
    float x2;

    // SSA operations with debug instrumentation
    float a1_f1 = c_cephes_LOG2EF_f; // auto a1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_LOG2EF, vl)
    dbg.a1_f1 = a1_f1;
    float c1_f1 = c_cephes_exp_p1_f; // auto c1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p1, vl)
    dbg.c1_f1 = c1_f1;
    float c3_f1 = c_cephes_exp_p3_f; // auto c3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p3, vl)
    dbg.c3_f1 = c3_f1;
    float c5_f1 = c_cephes_exp_p5_f; // auto c5 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p5, vl)
    dbg.c5_f1 = c5_f1;
    float x_f1 = std::fmin(v, c_exp_hi); // x = __riscv_vfmin_vf_f##TLEN##m##LMUL(x, c_exp_hi, vl)
    dbg.x_f1 = x_f1;
    float x_f2 = std::fmax(x_f1, c_exp_lo); // x = __riscv_vfmax_vf_f##TLEN##m##LMUL(x, c_exp_lo, vl)
    dbg.x_f2 = x_f2;
    float a1_f2 = a1_f1 * x_f2 + c5_f1; // /* express exp(x) as exp(g + n*log(2)) */                                       a1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(a1, x, c5, vl)
    dbg.a1_f2 = a1_f2;
    int32_t tmpi_f1 = static_cast<int32_t>(roundf(a1_f2)); // /* perform a floorf */                                                          auto tmpi = __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(a1, vl)
    dbg.tmpi_f1 = tmpi_f1;
    float tmp_f1 = static_cast<float>(tmpi_f1); // auto tmp = __riscv_vfcvt_f_x_v_f##TLEN##m##LMUL(tmpi , vl)
    dbg.tmp_f1 = tmp_f1;
    bool mask_f1 = (tmp_f1 > a1_f2); // auto mask = __riscv_vmfgt_vv_f##TLEN##m##LMUL##_b##MLEN(tmp, a1, vl)
    dbg.mask_f1 = mask_f1;
    float tmp_f2 = (mask_f1) ? ((tmp_f1) - (1.f)) : (tmp_f1); // tmp = __riscv_vfsub_vf_f##TLEN##m##LMUL##_m(mask, tmp, 1.f, vl)
    dbg.tmp_f2 = tmp_f2;
    float b1_f1 = c_cephes_exp_p0_f; // auto b1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p0, vl)
    dbg.b1_f1 = b1_f1;
    float x_f3 = x_f2 - c_cephes_exp_C1_f * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C1, tmp, vl)
    dbg.x_f3 = x_f3;
    int32_t a2_f1 = static_cast<int32_t>(roundf(tmp_f2)); // auto a2 = __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(tmp, vl)
    dbg.a2_f1 = a2_f1;
    float b2_f1 = c_cephes_exp_p2_f; // auto b2 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p2, vl)
    dbg.b2_f1 = b2_f1;
    float x_f4 = x_f3 - c_cephes_exp_C2_f * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C2, tmp, vl)
    dbg.x_f4 = x_f4;
    float b3_f1 = c_cephes_exp_p4_f; // auto b3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p4, vl)
    dbg.b3_f1 = b3_f1;
    float x2_f1 = x_f4 * x_f4; // auto x2 = __riscv_vfmul_vv_f##TLEN##m##LMUL(x, x, vl)
    dbg.x2_f1 = x2_f1;
    float b1_f2 = b1_f1 * x_f4 + c1_f1; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x, c1, vl)
    dbg.b1_f2 = b1_f2;
    float b2_f2 = b2_f1 * x_f4 + c3_f1; // b2 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b2, x, c3, vl)
    dbg.b2_f2 = b2_f2;
    float b3_f2 = b3_f1 * x_f4 + c5_f1; // b3 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b3, x, c5, vl)
    dbg.b3_f2 = b3_f2;
    float b1_f3 = b1_f2 * x2_f1 + b2_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b2, vl)
    dbg.b1_f3 = b1_f3;
    float x_f5 = x_f4 + 1.f; // x = __riscv_vfadd_vf_f##TLEN##m##LMUL(x, 1.f, vl)
    dbg.x_f5 = x_f5;
    float b1_f4 = b1_f3 * x2_f1 + b3_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b3, vl)
    dbg.b1_f4 = b1_f4;
    int32_t a_f1 = a2_f1 << MANTISSA_BITS; // auto a = __riscv_vsll_vx_i##TLEN##m##LMUL(a2, M, vl)
    dbg.a_f1 = a_f1;
    float b1_f5 = b1_f4 * x2_f1 + x_f5; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, x, vl)
    dbg.b1_f5 = b1_f5;
    float b_f1 = std::bit_cast<uint32_t>(b1_f5); // auto b =    __riscv_vreinterpret_v_f##TLEN##m##LMUL##_i##TLEN##m##LMUL(b1)
    dbg.b_f1 = b_f1;
    int32_t ret_f1 = a_f1 + b_f1; // /* build 2^n */                                                                 auto ret = __riscv_vadd_vv_i##TLEN##m##LMUL(a, b, vl)
    dbg.ret_f1 = ret_f1;

    // Handle final result
    float final_float;
    memcpy(&final_float, &ret_f1, sizeof(final_float));
    dbg.final_result = final_float;

    return dbg;
}

ExpDebugValues exp_scalar_f64_debug(double v) {
    ExpDebugValues dbg = {};
    dbg.input_v = v;

    // Variable declarations
    int32_t a;
    double a1;
    int32_t a2;
    double b;
    double b1;
    double b2;
    double b3;
    double c1;
    double c3;
    double c5;
    bool mask;
    int32_t ret;
    double tmp;
    int32_t tmpi;
    double x;
    double x2;

    // SSA operations with debug instrumentation
    double a1_f1 = c_cephes_LOG2EF; // auto a1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_LOG2EF, vl)
    dbg.a1_f1 = a1_f1;
    double c1_f1 = c_cephes_exp_p1; // auto c1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p1, vl)
    dbg.c1_f1 = c1_f1;
    double c3_f1 = c_cephes_exp_p3; // auto c3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p3, vl)
    dbg.c3_f1 = c3_f1;
    double c5_f1 = c_cephes_exp_p5; // auto c5 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p5, vl)
    dbg.c5_f1 = c5_f1;
    double x_f1 = std::fmin(v, c_exp_hi_d); // x = __riscv_vfmin_vf_f##TLEN##m##LMUL(x, c_exp_hi, vl)
    dbg.x_f1 = x_f1;
    double x_f2 = std::fmax(x_f1, c_exp_lo_d); // x = __riscv_vfmax_vf_f##TLEN##m##LMUL(x, c_exp_lo, vl)
    dbg.x_f2 = x_f2;
    double a1_f2 = a1_f1 * x_f2 + c5_f1; // /* express exp(x) as exp(g + n*log(2)) */                                       a1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(a1, x, c5, vl)
    dbg.a1_f2 = a1_f2;
    int64_t tmpi_f1 = static_cast<int32_t>(roundf(a1_f2)); // /* perform a floorf */                                                          auto tmpi = __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(a1, vl)
    dbg.tmpi_f1 = tmpi_f1;
    double tmp_f1 = static_cast<float>(tmpi_f1); // auto tmp = __riscv_vfcvt_f_x_v_f##TLEN##m##LMUL(tmpi , vl)
    dbg.tmp_f1 = tmp_f1;
    bool mask_f1 = (tmp_f1 > a1_f2); // auto mask = __riscv_vmfgt_vv_f##TLEN##m##LMUL##_b##MLEN(tmp, a1, vl)
    dbg.mask_f1 = mask_f1;
    double tmp_f2 = (mask_f1) ? ((tmp_f1) - (1.f)) : (tmp_f1); // tmp = __riscv_vfsub_vf_f##TLEN##m##LMUL##_m(mask, tmp, 1.f, vl)
    dbg.tmp_f2 = tmp_f2;
    double b1_f1 = c_cephes_exp_p0; // auto b1 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p0, vl)
    dbg.b1_f1 = b1_f1;
    double x_f3 = x_f2 - c_cephes_exp_C1 * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C1, tmp, vl)
    dbg.x_f3 = x_f3;
    int64_t a2_f1 = static_cast<int32_t>(roundf(tmp_f2)); // auto a2 = __riscv_vfcvt_x_f_v_i##TLEN##m##LMUL(tmp, vl)
    dbg.a2_f1 = a2_f1;
    double b2_f1 = c_cephes_exp_p2; // auto b2 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p2, vl)
    dbg.b2_f1 = b2_f1;
    double x_f4 = x_f3 - c_cephes_exp_C2 * tmp_f2; // x = __riscv_vfnmsac_vf_f##TLEN##m##LMUL(x, c_cephes_exp_C2, tmp, vl)
    dbg.x_f4 = x_f4;
    double b3_f1 = c_cephes_exp_p4; // auto b3 = __riscv_vfmv_v_f_f##TLEN##m##LMUL(c_cephes_exp_p4, vl)
    dbg.b3_f1 = b3_f1;
    double x2_f1 = x_f4 * x_f4; // auto x2 = __riscv_vfmul_vv_f##TLEN##m##LMUL(x, x, vl)
    dbg.x2_f1 = x2_f1;
    double b1_f2 = b1_f1 * x_f4 + c1_f1; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x, c1, vl)
    dbg.b1_f2 = b1_f2;
    double b2_f2 = b2_f1 * x_f4 + c3_f1; // b2 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b2, x, c3, vl)
    dbg.b2_f2 = b2_f2;
    double b3_f2 = b3_f1 * x_f4 + c5_f1; // b3 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b3, x, c5, vl)
    dbg.b3_f2 = b3_f2;
    double b1_f3 = b1_f2 * x2_f1 + b2_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b2, vl)
    dbg.b1_f3 = b1_f3;
    double x_f5 = x_f4 + 1.f; // x = __riscv_vfadd_vf_f##TLEN##m##LMUL(x, 1.f, vl)
    dbg.x_f5 = x_f5;
    double b1_f4 = b1_f3 * x2_f1 + b3_f2; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, b3, vl)
    dbg.b1_f4 = b1_f4;
    int64_t a_f1 = a2_f1 << MANTISSA_BITS_D; // auto a = __riscv_vsll_vx_i##TLEN##m##LMUL(a2, M, vl)
    dbg.a_f1 = a_f1;
    double b1_f5 = b1_f4 * x2_f1 + x_f5; // b1 = __riscv_vfmadd_vv_f##TLEN##m##LMUL(b1, x2, x, vl)
    dbg.b1_f5 = b1_f5;
    double b_f1 = std::bit_cast<uint64_t>(b1_f5); // auto b =    __riscv_vreinterpret_v_f##TLEN##m##LMUL##_i##TLEN##m##LMUL(b1)
    dbg.b_f1 = b_f1;
    int64_t ret_f1 = a_f1 + b_f1; // /* build 2^n */                                                                 auto ret = __riscv_vadd_vv_i##TLEN##m##LMUL(a, b, vl)
    dbg.ret_f1 = ret_f1;

    // Handle final result
    double final_double;
    memcpy(&final_double, &ret_f1, sizeof(final_double));
    dbg.final_result = final_double;

    return dbg;
}


// Comprehensive debug printing function for all exp SSA variables
void print_all_exp_debug_values(const ExpDebugValues& f32_dbg, const ExpDebugValues& f64_dbg, const char* test_name = "test") {
    auto print_row = [](const char *name, double f32v, double f64v) {
        float a = static_cast<float>(f32v);
        float b = static_cast<float>(f64v);
        // Simple ULP difference calculation
        uint32_t ua, ub;
        std::memcpy(&ua, &a, sizeof(ua));
        std::memcpy(&ub, &b, sizeof(ub));
        uint32_t ulp = (ua > ub) ? (ua - ub) : (ub - ua);
        if ((ua ^ ub) & 0x80000000u) ulp = std::numeric_limits<uint32_t>::max(); // Different signs

        std::cout << std::left << std::setw(26) << name << "| "
                  << std::setw(20) << std::scientific << std::setprecision(8) << a << "| "
                  << std::setw(20) << b << "| ULP " << ulp << "\n";
    };

    std::cout << "\n=== " << test_name << " - ALL EXP DEBUG VALUES ===\n";
    std::cout << std::left << std::setw(26) << "Variable Name" << "| "
              << std::setw(20) << "f32 Value" << "| "
              << std::setw(20) << "f64 Value" << "| ULP Diff\n";
    std::cout << std::string(80, '-') << "\n";

    // Standard fields
    print_row("input_v", f32_dbg.input_v, f64_dbg.input_v);
    print_row("final_result", f32_dbg.final_result, f64_dbg.final_result);
    print_row("a1_f1", f32_dbg.a1_f1, f64_dbg.a1_f1);
    print_row("a1_f2", f32_dbg.a1_f2, f64_dbg.a1_f2);
    print_row("a2_f1", f32_dbg.a2_f1, f64_dbg.a2_f1);
    print_row("a_f1", f32_dbg.a_f1, f64_dbg.a_f1);
    print_row("b1_f1", f32_dbg.b1_f1, f64_dbg.b1_f1);
    print_row("b1_f2", f32_dbg.b1_f2, f64_dbg.b1_f2);
    print_row("b1_f3", f32_dbg.b1_f3, f64_dbg.b1_f3);
    print_row("b1_f4", f32_dbg.b1_f4, f64_dbg.b1_f4);
    print_row("b1_f5", f32_dbg.b1_f5, f64_dbg.b1_f5);
    print_row("b2_f1", f32_dbg.b2_f1, f64_dbg.b2_f1);
    print_row("b2_f2", f32_dbg.b2_f2, f64_dbg.b2_f2);
    print_row("b3_f1", f32_dbg.b3_f1, f64_dbg.b3_f1);
    print_row("b3_f2", f32_dbg.b3_f2, f64_dbg.b3_f2);
    print_row("b_f1", f32_dbg.b_f1, f64_dbg.b_f1);
    print_row("c1_f1", f32_dbg.c1_f1, f64_dbg.c1_f1);
    print_row("c3_f1", f32_dbg.c3_f1, f64_dbg.c3_f1);
    print_row("c5_f1", f32_dbg.c5_f1, f64_dbg.c5_f1);
    print_row("mask_f1", f32_dbg.mask_f1 ? 1.0 : 0.0, f64_dbg.mask_f1 ? 1.0 : 0.0);
    print_row("ret_f1", f32_dbg.ret_f1, f64_dbg.ret_f1);
    print_row("tmp_f1", f32_dbg.tmp_f1, f64_dbg.tmp_f1);
    print_row("tmp_f2", f32_dbg.tmp_f2, f64_dbg.tmp_f2);
    print_row("tmpi_f1", f32_dbg.tmpi_f1, f64_dbg.tmpi_f1);
    print_row("x2_f1", f32_dbg.x2_f1, f64_dbg.x2_f1);
    print_row("x_f1", f32_dbg.x_f1, f64_dbg.x_f1);
    print_row("x_f2", f32_dbg.x_f2, f64_dbg.x_f2);
    print_row("x_f3", f32_dbg.x_f3, f64_dbg.x_f3);
    print_row("x_f4", f32_dbg.x_f4, f64_dbg.x_f4);
    print_row("x_f5", f32_dbg.x_f5, f64_dbg.x_f5);
    std::cout << std::string(80, '=') << "\n\n";
}

